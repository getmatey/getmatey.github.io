{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>Matey is an open-source container ingress configurator for webservers. It configures your webservers to act as a reverse proxy or load balancer for your containers. It currently supports Docker and IIS. All you need to do is point Matey at your container runtime and webservers.</p> <p>Matey's design considers that existing webservers have decades of work, fixes and platform-specific optimizations behind them. Why re-invent the webserver when they are highly configurable and can easily integrate with other system components?</p>"},{"location":"#overview","title":"Overview","text":"<p>Let's say your environment has a lot of containers, serving web requests, which should be reachable from the outside world. You need a reverse proxy to forward requests to the correct container. This becomes a huge effort to configure correctly, especially if your containers are often swapped or moved.</p> <p>Matey is an automated configurator designed to perform this for you. It will watch your container runtime and automatically configure your webserver to forward traffic to your services from the outside world.</p> <p> </p>"},{"location":"#matey-quick-start-using-docker","title":"Matey quick start (using Docker)","text":""},{"location":"#1-installation","title":"1 - Installation","text":"<p>Note</p> <p>Matey is currently only supported for Windows Server hosts using IIS. We may introduce support for Linux compatible webservers in the future.</p> <p>You will first need to install Matey. Let's start there.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker (Installation guide)</li> <li>IIS 7.0+ (Installation guide)</li> <li>ARR module for IIS (Installation guide)</li> </ul>"},{"location":"#use-the-installer","title":"Use the installer","text":"<p>Grab the latest installer from the releases page.</p> <p>Run the installer on your webserver. After installation, you should see \"Matey Configurator Service\" in your Services list.</p> Tip <p>Run the following PowerShell command to check the service installation: <pre><code>Get-Service -DisplayName \"Matey Configurator Service\" | Select DisplayName, StartType, Status\n</code></pre> You should see one entry, like this: <pre><code>DisplayName                StartType  Status\n-----------                ---------  ------\nMatey Configurator Service Automatic  Running\n</code></pre></p> <p>The service will be set to start automatically.</p> <p>By default, Matey is configured to point to Docker and IIS on the local machine.</p>"},{"location":"#2-start-a-container-matey-sees-it-and-configures-your-webserver","title":"2 - Start a container - Matey sees it and configures your webserver","text":"<p>With the Matey service running and waiting for containers, let's start one!</p> <pre><code>docker start --label matey.enable=true --label matey.frontend.rule=Host:hello-world.localhost getmatey/hello-world\n</code></pre> Tip <p>You can also use the equivalent <code>docker-compose.yml</code>: <pre><code>version: '3'\nservices:\nhello-world:\nimage: getmatey/hello-world\nlabels:\n- \"matey.enabled=true\"\n- \"matey.frontend.rule=Host: hello-world.localhost\"\n</code></pre> and start the container with the following command: <pre><code>docker compose up -d\n</code></pre></p> <p>When Matey sees the service, it configures your webserver to route requests to your container so you can reach it. Let's check it with PowerShell. <pre><code>(Invoke-WebRequest http://hello-world.localhost).Content\n</code></pre> Should give you: <pre><code>Hello, world!\n</code></pre></p>"},{"location":"concepts/","title":"Concepts","text":"<ul> <li>Running containers communicate service configurations to Matey through labels, which are used to configure traffic rules on the webserver.</li> <li>Frontends specify routes to backends based on request properties, such as a host name.</li> <li>Backends are formed of one or more containers which process incoming requests.</li> </ul>"},{"location":"concepts/#frontends","title":"Frontends","text":"<p>A frontend is a set of rules which specify how incoming traffic should be forwarded through the webserver. If the frontend rules match request properties, the request will be forwarded to the corresponding backend.</p>"},{"location":"concepts/#rules","title":"Rules","text":"Expression Description <code>Host: example.com</code> Match request host."},{"location":"concepts/#backends","title":"Backends","text":"<p>A backend is a set of rules which specify how traffic is distributed to containers. Traffic can be directed to single containers or load-balanced across multiple.</p>"},{"location":"concepts/#load-balancing","title":"Load-balancing","text":""},{"location":"concepts/#weighting","title":"Weighting","text":"<p>Weighting determines the proportion of traffic each container should handle. For example, if <code>container_1</code> has a weight of <code>20</code> and <code>container_2</code> has a weight of <code>80</code>, then <code>container_1</code> will receive 20% of the traffic while <code>container_2</code> will receive 80%.</p>"},{"location":"concepts/#sticky-sessions","title":"Sticky sessions","text":"<p>Sticky sessions are a feature of most load balancers which ensure fixed session paths.</p> <p>When enabled, a cookie is set on the first request with the load balancer. This cookie is then used to ensure that all following requests are sent to the same container.</p> Note <p>Sticky sessions are usually helpful if your application retains state in memory. They are otherwise generally not necessary.</p> <p>Enabling sticky sessions will also effectively make the weighting \"by session\" instead of \"by request.\"</p>"},{"location":"concepts/#configuration","title":"Configuration","text":"<p>Matey's configuration is separated into two categories:</p> <ul> <li>Global configuration which is defined at start-up and determines how Matey runs and communicates with your infrastructure.</li> <li>Service configuration which is defined at runtime and determines how traffic is forwarded to your containers.</li> </ul>"},{"location":"concepts/#global-configuration","title":"Global configuration","text":"<p>The global configuration specifies connections to webservers to configure and container runtimes. By default, i.e. with no configuration, the local machine is used.</p>"},{"location":"concepts/#configuration-file","title":"Configuration file","text":"<p>Matey will find a <code>matey.json</code> file in its working directory. When installed, this is <code>C:\\Program Files\\Matey</code>.</p> <p>See the global configuration reference for more information.</p>"},{"location":"concepts/#service-configuration","title":"Service configuration","text":"<p>The service configuration is used when setting up frontends and backends.</p> <p>Matey will watch for changes in these configurations and hot-reload webserver configurations automatically to create routes to your services.</p> <p>Please see the Docker configuration reference for more information.</p>"},{"location":"configuration/docker/","title":"Docker","text":"<p>A straight-forward docker setup.  </p>"},{"location":"configuration/docker/#install-matey-with-the-docker-backend","title":"Install Matey with the Docker backend","text":"<p>If you haven't already, install Matey.</p> <p>By default, it is configured to work with the local Docker Engine.</p>"},{"location":"configuration/docker/#matey-will-watch-your-docker-containers-and-configure-your-webserver","title":"Matey will watch your Docker containers and configure your webserver","text":"<p>With the Matey service running and waiting for containers, let's start one!</p> <pre><code>docker start --label matey.enable=true --label matey.frontend.rule=Host:hello-world.localhost getmatey/hello-world\n</code></pre> Tip <p>You can also use the equivalent <code>docker-compose.yml</code>: <pre><code>version: '3'\nservices:\nhello-world:\nimage: getmatey/hello-world\nlabels:\n- \"matey.enabled=true\"\n- \"matey.frontend.rule=Host: hello-world.localhost\"\n</code></pre> and start the container with the following command: <pre><code>docker compose up -d\n</code></pre></p> <p>When Matey sees the service, it configures your webserver to route requests to your container so you can reach it. Let's check it with PowerShell. <pre><code>(Invoke-WebRequest http://hello-world.localhost).Content\n</code></pre> Should give you: <pre><code>Hello, world!\n</code></pre></p>"},{"location":"configuration/docker/#container-labels","title":"Container Labels","text":"Label Description <code>matey.enabled=true</code> Whether Matey should configure the webserver to forward to the container. <code>matey.&lt;segment_name&gt;.port=80</code> Sets the container port to which traffic should be forwarded to. <code>matey.&lt;segment_name&gt;.weight=50</code> Assigns a weight to the container for load balancing. <code>matey.&lt;segment_name&gt;.loadbalancer.stickiness.enabled=true</code> Whether to use sticky load balancing for the container. <code>matey.&lt;segment_name&gt;.loadbalancer.stickiness.cookieName=_mateyaffinity</code> Sets the cookie name to use to track sessions for sticky load balancing. <code>matey.&lt;segment_name&gt;.domain=example.com</code> Sets the default base domain provided to the frontend rule expression. <code>matey.&lt;segment_name&gt;.frontend.rule=Host:api.example.com</code> Overrides the frontend rule. Default: <code>Host:{container_name}.{domain}</code>."},{"location":"configuration/global/","title":"Global configuration","text":"<pre><code>{\n// Docker client configuration section\n\"Docker\": {\n// The communication endpoint for the docker engine API.\n//\n// On Windows installations, the local engine is reachable through a named pipe.\n\"Endpoint\": \"npipe://./pipe/docker_engine\"\n},\n// IIS management configuration section\n\"IIS\": {\n// The name of the server which hosts the IIS instance which is managed over WMI.\n//\n// If IIS is installed locally, leave this option commented out.\n//\"ServerName\": \"SRV-0153\"\n}\n}\n</code></pre>"},{"location":"configuration/global/#docker","title":"Docker","text":"<ul> <li><code>Endpoint</code>: The endpoint which the Docker Engine can be reached at. On Windows, this is a named pipe which can be specified as <code>\"npipe://./pipe/docker_engine\"</code>. As such, this is the default value for the option.</li> </ul>"},{"location":"configuration/global/#iis","title":"IIS","text":"<ul> <li><code>ServerName</code>: The name of the server which hosts the IIS instance. The server should have Windows Management Services running, please see how to use WMI to configure IIS. Note: If you are using the local machine, do not configure this value or configure it as <code>null</code>.</li> </ul>"}]}